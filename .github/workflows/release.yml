name: Continuous Deployment

on:
  workflow_dispatch: # Manual trigger for a release
  push:
    tags:
      - "v*" # Trigger on tags like v1.0.0

jobs:
  release:
    name: Windows Release
    runs-on: windows-latest

    env:
      PROJECT_NAME: PhotoManager/PhotoManager.sln
      ZIP_NAME: photo-manager-${{ github.ref_name }}.zip
      DOTNET_VERSION: 8.0.x

    steps:
      # Step 1: Checkout the code
      - name: ⤵️ Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history is fetched

      # Step 2: Setup .NET SDK
      - name: 🛠️ Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Step 3: Restore dependencies
      - name: 🛠️ Restore dependencies
        run: dotnet restore ${{ env.PROJECT_NAME }}

      # Step 4: Build the project for release
      - name: 🔨 Build
        run: dotnet build --no-restore --configuration Release ${{ env.PROJECT_NAME }}

      # Step 5: Publish the project
      - name: 📦 Publish
        run: dotnet publish --no-build --configuration Release --output ./output -p:PublishSingleFile=false PhotoManager/PhotoManager.UI/PhotoManager.UI.csproj

      # Step 6: Compress output into a ZIP file
      - name: 📂 Create ZIP File
        run: |
          Compress-Archive -Path ./output/* -DestinationPath ./${{ env.ZIP_NAME }}

      # Step 7: Create Release with GitHub CLI
      - name: 🏷️ Generate Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --generate-notes

      # Step 8: Create Release with GitHub CLI
      - name: 🏷️ Create Release
        run: |
          gh release create ${{ github.ref_name }} ./${{ env.ZIP_NAME }} --title "PhotoManager ${{ github.ref_name }}" --notes-file release_notes.txt --target ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 9: Upload ZIP File as Artifact
      - name: 💾 Upload ZIP File
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ./${{ env.ZIP_NAME }}

      # Step 10: Upload Build Artifacts
      - name: 💾 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build Artifacts
          path: ./output
